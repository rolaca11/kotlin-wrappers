// Generated by Karakum - do not modify it manually!



package createserver




external interface Server : node.events.IEventEmitter {

@Suppress("DEPRECATION")
@nativeInvoke
operator fun  invoke(req: node.http.IncomingMessage, res: node.http.ServerResponse<*>, next: Function<*> = definedExternally): Unit
            
var route: String
var stack: Array<ServerStackItem>
/**
         * Utilize the given middleware `handle` to the given `route`,
         * defaulting to _/_. This "route" is the mount-point for the
         * middleware, when given a value other than _/_ the middleware
         * is only effective when that segment is present in the request's
         * pathname.
         *
         * For example if we were to mount a function at _/admin_, it would
         * be invoked on _/admin_, and _/admin/settings_, however it would
         * not be invoked for _/_, or _/posts_.
         */
fun use(fn: NextHandleFunction): Server
fun use(fn: HandleFunction): Server
fun use(route: String, fn: NextHandleFunction): Server
fun use(route: String, fn: HandleFunction): Server
/**
         * Handle server requests, punting them down
         * the middleware stack.
         */
fun handle(req: node.http.IncomingMessage, res: node.http.ServerResponse<*>, next: Function<*>): Unit
/**
         * Listen for connections.
         *
         * This method takes the same arguments
         * as node's `http.Server#listen()`.
         *
         * HTTP and HTTPS:
         *
         * If you run your application both as HTTP
         * and HTTPS you may wrap them individually,
         * since your Connect "server" is really just
         * a JavaScript `Function`.
         *
         *      var connect = require('connect')
         *        , http = require('http')
         *        , https = require('https');
         *
         *      var app = connect();
         *
         *      http.createServer(app).listen(80);
         *      https.createServer(options, app).listen(443);
         */
fun listen(port: Double, hostname: String = definedExternally, backlog: Double = definedExternally, callback: Function<*> = definedExternally): node.http.Server<*, *>
fun listen(port: Double, hostname: String = definedExternally, callback: Function<*> = definedExternally): node.http.Server<*, *>
fun listen(path: String, callback: Function<*> = definedExternally): node.http.Server<*, *>
fun listen(handle: Any?, listeningListener: Function<*> = definedExternally): node.http.Server<*, *>
}
